@model WebApplication3.Models.ViewModels.RegistrarOperaciones_VM

@{
    ViewBag.Title = "Compra Venta";
}
<style>
    h2 {
        text-align: center !important;
        padding-right: 15%;
    }

    form {
        padding-left: 30%;
        /*padding-left: 30%;*/
    }
</style>

<h2>Compra Venta</h2>

@using (Ajax.BeginForm("RealizarOperacion", "CompraVenta", new AjaxOptions
{
    HttpMethod = "POST",
    OnSuccess = "onSuccess",
    UpdateTargetId = "divResultado",
    OnFailure = "onFailure",
    OnBegin = "onBegin"
}))
{
    @Html.HiddenFor(m => m.listaMonedas)
    @Html.HiddenFor(m => m.tiposOperaciones)
    @Html.HiddenFor(m => m.operaciones.FechaCreacion)


    <div class="center" id="grupo">

        <div class="form-group">
            <div id="divResultado">
            </div>
            <label for="Moneda">Moneda</label>
            @Html.DropDownListFor(m => m.operaciones.Moneda_PK, new SelectList(Model.listaMonedas, "moneda_pk", "nombre"), htmlAttributes: new { @class = "selectpicker", @id = "selectpicker1" })
            <br />
        </div>

        <div class="form-group">
            <label for="Tipo Operacion">Tipo operación</label>
            @Html.DropDownListFor(m => m.operaciones.TipoOperacion_PK, new SelectList(Model.tiposOperaciones, "TipoOperacion_PK", "Nombre"), htmlAttributes: new { @class = "selectpicker", @id = "selectpicker2" })
        </div>

        <div class="form-group">
            <label for="fecha">Fecha</label>
            <div class="input-group date" id="datetimepicker" data-target-input="nearest">
                <div>
                    @Html.TextBoxFor(m => m.fecha, htmlAttributes: new { @class = "form-control datetimepicker-input", @data_target = "datetimepicker" })
                    @Html.ValidationMessageFor(model => model.fecha, "", new { @class = "text-danger" })
                </div>
                <div class="input-group-append" data-target="#datetimepicker" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="hora">Hora</label>
            <div class="input-group date" id="datetimepicker2" data-target-input="nearest">
                @Html.TextBoxFor(m => m.hora, htmlAttributes: new { @class = "form-control datetimepicker-input", @data_target = "datetimepicker2" })
                <div class="input-group-append" data-target="#datetimepicker2" data-toggle="datetimepicker">
                    <div class="input-group-text"><i class="fa fa-clock"></i></div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="Importe">Importe €</label>
            @Html.EditorFor(model => model.operaciones.Importe, new { htmlAttributes = new { @class = "form-control", @id = "Importe" } })
            @Html.ValidationMessageFor(model => model.operaciones.Importe, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            <label for="monedasRecibidas">Monedas recibidas</label>
            @Html.EditorFor(model => model.operaciones.NumMonedas, new { htmlAttributes = new { @class = "form-control", value = "Importe", @readonly = "readonly", @id = "monedasRecibidas" } })
        </div>
        <input id="btnFinal" type="submit" value="Comprar" class="btn-block btn-lg  btn-primary" />
    </div>

}

@section scripts{

    <script>
        function onSuccess() {
            $('#divCorrecto').show();
            alert("sucess");
        }
        function onBegin() {
        }
        function onFailure() {
            alert("KO")
        }

        function ajaxCambioCripto() {

            //Llamada ajax
            var moneda_PK = $('#selectpicker1 option:selected').val();
            $.ajax({
                url: "@Url.Action("RecuperarTasaCambio")",
                type: 'POST',
                data: {
                    'id': moneda_PK
                },
                dataType: 'json',
                success: function (data) {
                    if (data.status == "OK") {
                        var tasaCambio = data.tasaCambio;
                        var monedasTotales = $('#Importe').val() * tasaCambio;
                        var monedasTotalesFixed = monedasTotales.toFixed(6);
                        $("#monedasRecibidas").val(monedasTotalesFixed);
                    }
                    if (data.status == "KO") {
                        alert("Selecciona una moneda");
                    }
                },
                error: function (request, error) {
                    alert("Request: " + JSON.stringify(request));
                }
            });
        }

        //Ponemos formato local
        $('#datetimepicker').datetimepicker({ locale: "es", format: "L" });
        $('#datetimepicker2').datetimepicker({ locale: "es", format: "LT" });

        //Añadimos el atributo para poder busca en el dropdown
        $('#selectpicker1').attr('data-live-search', true);

        //Cambiamos el texto del botón según la operación que se vaya a realizar
        $("#selectpicker2").change(function () {
            $("#btnFinal").val($('#selectpicker2 option:selected').text());
        });

        //Cambiamos la cantidad de cripto recibida según el dinero
        $("#Importe").keyup(function () {
            ajaxCambioCripto();
        });

        //Cambiamos la tasa de cambio si seleccionamos otra moneda
        $("#selectpicker1").change(function () {
            ajaxCambioCripto();
        });
    </script>
}
